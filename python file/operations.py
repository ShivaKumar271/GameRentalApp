import json
import string
import random
from json import JSONDecodeError
from datetime import datetime

def Register(type,gamers_json_file,sellers_json_file,Email_ID,Username,Password,Contact_Number):
    '''Register Function || Already Given'''
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='gamer':
        f=open(gamers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
            "Wishlist":[],
            "Cart":[],
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()

def Login(type,gamers_json_file,sellers_json_file,Username,Password):
    '''Login Functionality || Return True if successfully logged in else False || Already Given'''
    d=0
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
    else:
        f=open(gamers_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Username"]==Username and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID || Already Given'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID || Already Given'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def days_between(d1, d2):
    '''Calculating the number of days between two dates || Already Given'''
    d1 = datetime.strptime(d1, "%Y-%m-%d")
    d2 = datetime.strptime(d2, "%Y-%m-%d")
    return abs((d2 - d1).days)

def Create_Product(owner,product_json_file,product_ID,product_title,product_type,price_per_day,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    '''Write your code below'''
    owner=input('enter owner name: ')
    product_ID=int(input('enter product id: '))
    product_title=input('enter product title: ')
    product_type=input('enter product type: ')
    price_per_day=int(input('enter price per day: '))
    total_stock_available=int(input('enter stock available: '))
    product_dict = {
        "owner": owner,
        "ID": product_ID,
        "title": product_title,
        "type": product_type,
        "price_per_day": price_per_day,
        "total_stock_available": total_stock_available
    }

    
    with open(product_json_file, "r") as f:
        products = json.load(f)

    if product_ID in products:
        print("Error: Product ID already exists")
        return False

    products[product_ID] = product_dict

    with open(product_json_file, "w") as f:
        json.dump(products, f, indent=4)

    print("Product created successfully")
    return True



def Fetch_all_Products_created_by_seller(owner,product_json_file):
    '''Get all products created by the seller(owner)'''
    '''Write your code below'''
    owner=input("enter owner name")
    with open(product_json_file, "r") as f:
        products = json.load(f)

    seller_products = []

    for product_id, product_details in products.items():
        if product_details["owner"] == owner:
            seller_products.append(product_details)

    return seller_products



def Fetch_all_products(products_json_file):
    '''Get all products created till now || Helper Function || Already Given'''
    All_Products_list=[]
    f=open(products_json_file,'r')
    try:
        content=json.load(f)
        All_Products_list=content
    except JSONDecodeError:
        pass
    return All_Products_list

def Fetch_Product_By_ID(product_json_file,product_ID):
    '''Get product deatils by product ID'''
    '''Write your code below'''
    product_ID=int(input("enter product id: "))
    with open(product_json_file, "r") as f:
        products = json.load(f)

    if product_ID in products:
        return products[product_ID]
    else:
        print("Error: Product not found")
        return None
    
    
    


def Update_Product(Username,product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    '''Write your code below'''
    Username=input('enter username: ')
    with open(product_json_file, "r") as f:
        products = json.load(f)

    if product_ID not in products:
        print("Error: Product not found")
        return False

    if products[product_ID]["owner"] != Username:
        print("Error: You don't have permission to update this product")
        return False

    products[product_ID][detail_to_be_updated] = new_value

    with open(product_json_file, "w") as f:
        json.dump(products, f, indent=4)

    print("Product updated successfully")
    return True
    
    

def Add_item_to_wishlist(Username,product_ID,gamers_json_file):
    '''Add Items to wishlist || Return True if added successfully else False'''
    '''Write your code below'''
    Username=input('enter user name: ')
    product_ID=int(input('enter product id'))
    with open(gamers_json_file, "r") as f:
        gamers = json.load(f)

    if Username not in gamers:
        print("Error: User not found")
        return False

    gamers[Username]["wishlist"].append(product_ID)

    with open(gamers_json_file, "w") as f:
        json.dump(gamers, f, indent=4)

    print("Product added to wishlist successfully")
    return True
    


def Remove_item_from_wishlist(Username,product_ID,gamers_json_file):
    '''Remove items from wishlist || Return True if removed successfully else False'''
    '''Write your code below'''
    Username=input('enter user name: ')
    product_ID=int(input('enter product id: '))
    with open(gamers_json_file, "r") as f:
        gamers = json.load(f)

    if Username not in gamers:
        print("Error: User not found")
        return False

    if product_ID not in gamers[Username]["wishlist"]:
        print("Error: Product not found in user's wishlist")
        return False

    gamers[Username]["wishlist"].remove(product_ID)

    with open(gamers_json_file, "w") as f:
        json.dump(gamers, f, indent=4)

    print("Product removed from wishlist successfully")
    return True
    

def Add_item_to_cart(Username,product_ID,Quantity,gamers_json_file,booking_start_date,booking_end_date,products_json_file):
    '''Add item to the cart || Check whether the quantity mentioned is available || Return True if added successfully else False'''
    '''Add the Product ID, Quantity, Price, Booking Start Date, Booking End Date in the cart as list of dictionaries'''
    '''Write your code below'''
    Username=input('enter user name: ')
    product_ID=int(input('enter product id: '))
    with open(gamers_json_file, "r") as f:
        gamers = json.load(f)

    with open(products_json_file, "r") as f:
        products = json.load(f)

    if Username not in gamers:
        print("Error: User not found")
        return False

    if product_ID not in products:
        print("Error: Product not found")
        return False

    total_stock_available = products[product_ID]["total_stock_available"]
    if Quantity > total_stock_available:
        print(f"Error: Only {total_stock_available} units of {product_ID} are available")
        return False

    price_per_day = products[product_ID]["price_per_day"]
    num_days = (booking_end_date - booking_start_date).days
    total_price = price_per_day * num_days * Quantity

    cart_item = {
        "product_ID": product_ID,
        "quantity": Quantity,
        "price_per_day": price_per_day,
        "booking_start_date": booking_start_date,
        "booking_end_date": booking_end_date,
        "total_price": total_price
    }

    gamers[Username]["cart"].append(cart_item)

    products[product_ID]["total_stock_available"] -= Quantity

    with open(gamers_json_file, "w") as f:
        json.dump(gamers, f, indent=4)

    with open(products_json_file, "w") as f:
        json.dump(products, f, indent=4)

    print("Product added to cart successfully")
    return True

def Remove_item_from_cart(Username,product_ID,gamers_json_file):
    '''Remove items from the cart || Return True if removed successfully else False'''
    '''Write your code below'''
    with open(gamers_json_file, "r") as f:
        gamers = json.load(f)

    if Username not in gamers:
        print("Error: User not found")
        return False

    cart = gamers[Username]["cart"]
    for i, item in enumerate(cart):
        if item["product_ID"] == product_ID:        
            del cart[i]
            with open(gamers_json_file, "w") as f:
                json.dump(gamers, f, indent=4)
            print("Item removed from cart successfully")
            return True

    print("Error: Item not found in the cart")
    return False
    

def View_Cart(Username,gamers_json_file):
    '''Return the current cart of the user'''
    '''Write your code below'''
    Username=input('enter username: ')
    with open(gamers_json_file, "r") as f:
        gamers = json.load(f)

    if Username not in gamers:
        print("Error: User not found")
        return None

    cart = gamers[Username]["cart"]

    if not cart:
        print("Cart is empty")
        return None

    for i, item in enumerate(cart):
        product_ID = item["product_ID"]
        quantity = item["quantity"]
        price_per_day = item["price_per_day"]
        booking_start_date = item["booking_start_date"]
        booking_end_date = item["booking_end_date"]
        total_price = item["total_price"]
        print(f"{i+1}. {product_ID} ({quantity} units) - ${total_price:.2f} ({booking_start_date} to {booking_end_date})")

    return cart

def Place_order(Username,gamers_json_file,Order_Id,orders_json_file,products_json_file):
    '''Place order || Return True is order placed successfully else False || Decrease the quantity of the product orderd if successfull'''
    '''Write your code below'''
    Username=input('enter username: ')
    with open(gamers_json_file, "r") as f:
        gamers = json.load(f)

    if Username not in gamers:
        print("Error: User not found")
        return False

    cart = gamers[Username]["cart"]

    if not cart:
        print("Error: Cart is empty")
        return False

    with open(products_json_file, "r") as f:
        products = json.load(f)

    ordered_items = []

    for item in cart:
        product_ID = item["product_ID"]
        quantity = item["quantity"]
        price_per_day = item["price_per_day"]
        booking_start_date = item["booking_start_date"]
        booking_end_date = item["booking_end_date"]

        if products[product_ID]["total_stock_available"] < quantity:
            print(f"Error: {product_ID} is not available in the requested quantity")
            return False

        products[product_ID]["total_stock_available"] -= quantity

        days_booked = (datetime.strptime(booking_end_date, "%Y-%m-%d") - datetime.strptime(booking_start_date, "%Y-%m-%d")).days + 1
        total_price = days_booked * quantity * price_per_day

        ordered_item = {
            "product_ID": product_ID,
            "quantity": quantity,
            "price_per_day": price_per_day,
            "booking_start_date": booking_start_date,
            "booking_end_date": booking_end_date,
            "total_price": total_price
        }
        ordered_items.append(ordered_item)

    with open(orders_json_file, "r+") as f:
        orders = json.load(f)
        orders[Order_Id] = {
            "Username": Username,
            "ordered_items": ordered_items,
            "order_date": str(datetime.now())
        }
        f.seek(0)
        json.dump(orders, f)
        f.truncate()

    gamers[Username]["cart"] = []

    with open(gamers_json_file, "w") as f:
        json.dump(gamers, f)

    with open(products_json_file, "w") as f:
        json.dump(products, f)

    return True
    

def View_User_Details(gamers_json_file,Username):
    '''Return a list with all gamer details based on the username || return an empty list if username not found'''
    '''Write your code below'''
    Username=input('enter username: ')
    with open(gamers_json_file) as f:
        gamers = json.load(f)
    for gamer in gamers:
        if gamer['Username'] == Username:
            return gamer
    return []

def Update_User(gamers_json_file,Username,detail_to_be_updated,updated_detail):
    '''Update the detail_to_be_updated of the user to updated_detail || Return True if successful else False'''
    '''Write your code below'''
    Username=input('enter username: ')
    with open(gamers_json_file, 'r+') as f:
        gamers = json.load(f)
        for gamer in gamers:
            if gamer['Username'] == Username:
                gamer[detail_to_be_updated] = updated_detail
                f.seek(0)
                json.dump(gamers, f, indent=4)
                f.truncate()
                return True
        return False

def Fetch_all_orders(orders_json_file,Username):
    '''Fetch all previous orders for the user and return them as a list'''
    '''Write your code below'''
    Username=input('enter username: ')
    with open(orders_json_file) as f:
        orders = json.load(f)
    user_orders = []
    for order in orders:
        if order['Username'] == Username:
            user_orders.append(order)
    return user_orders

